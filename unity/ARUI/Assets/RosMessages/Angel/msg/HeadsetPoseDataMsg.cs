//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Angel
{
    [Serializable]
    public class HeadsetPoseDataMsg : Message
    {
        public const string k_RosMessageName = "angel_msgs/HeadsetPoseData";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  Message for transporting the world matrices and projection matrices provided
        //  with each frame from the HoloLens.
        // 
        public Std.HeaderMsg header;
        //  Camera-to-world projection matrix. This is a flattened 4x4 matrix in
        //  row-major order (e.g. [00,01,02,03,10,...]). The world coordinate system
        //  described by this transform is left-handed (Unity).
        public float[] world_matrix;
        //  Camera matrix (flattened 4x4 format).
        //  See: https://docs.unity3d.com/ScriptReference/Camera-projectionMatrix.html
        public float[] projection_matrix;

        public HeadsetPoseDataMsg()
        {
            this.header = new Std.HeaderMsg();
            this.world_matrix = new float[0];
            this.projection_matrix = new float[0];
        }

        public HeadsetPoseDataMsg(Std.HeaderMsg header, float[] world_matrix, float[] projection_matrix)
        {
            this.header = header;
            this.world_matrix = world_matrix;
            this.projection_matrix = projection_matrix;
        }

        public static HeadsetPoseDataMsg Deserialize(MessageDeserializer deserializer) => new HeadsetPoseDataMsg(deserializer);

        private HeadsetPoseDataMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.world_matrix, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.projection_matrix, sizeof(float), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.WriteLength(this.world_matrix);
            serializer.Write(this.world_matrix);
            serializer.WriteLength(this.projection_matrix);
            serializer.Write(this.projection_matrix);
        }

        public override string ToString()
        {
            return "HeadsetPoseDataMsg: " +
            "\nheader: " + header.ToString() +
            "\nworld_matrix: " + System.String.Join(", ", world_matrix.ToList()) +
            "\nprojection_matrix: " + System.String.Join(", ", projection_matrix.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
